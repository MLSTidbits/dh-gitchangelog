#!/bin/env bash

# Copyright (C) 2025 by Michael Schaecher <mschaecher78@gmail.com> under the GNU-3.0-or-later License

# This script generates a changelog file for a Debian package from git commit messages.
# It is designed to be run in a git repository and will create a changelog file
#
# - Get the list of unique commit dates and time in reverse chronological order
# - Check if the git branch is for development/testing or main branch
# - Only run if on a 64-bit system
# - Initialize the changelog file
# - Iterate over each date
# - Get the list of commitTime for the current date
# - Get the author name and email from the latest commit of the day
# - Convert git commit short id to version number
# - Format the date for the changelog entry
# - Start the changelog entry
# - Add each commit message to the changelog entry
# - End the changelog entry
# - Remove the last line of the changelog file
# - Compress the changelog file using gzip
# - Remove the temporary changelog file

set -eo pipefail

appName="dpkg-changelog"
appVersion="$(cat /usr/share/doc/dpkg-changelog/version)"

appInfo="$(cat <<EOF
${appName} (version: ${appVersion}) - Debian package changelog generator
Copyright (C) 2025 by Michael Schaecher <michaelleeschaecher@gmail.com>

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU-3.0-or-later License for more details.
EOF
)"

# Define the package name
packageName="$(basename "$(pwd)")"

# Define the output changelog file
changelogFile="debian/changelog"

# Get the list of unique commit dates in reverse chronological order
commit_dates=$(git log --date=short --pretty=format:'%ad' | sort -ur)

fistCommitDate=$(git log --date=short --pretty=format:'%ad' | tail -n 1)

branches=( "main" "master" "stable" "unstable" "testing" "dev" "release" "production" )

# Check if the system is 64-bit
test "$(uname -m)" = "x86_64" || {
    echo "This script is designed to run on a 64-bit system."
    exit 1
}

case "${1}" in
    -h|-v|--help|--version  ) echo "$appInfo" ; exit 0 ;;
    *                       )
        echo "${appName}: generate a changelog file for - ${packageName} -" ; echo "" > "$changelogFile"
    ;;
esac

# Iterate over each date
for d in $commit_dates; do

    # Get the list of commits for the current date
    commits=$(git log --since="$d 00:00" --until="$d 23:59" --pretty=format:'%h')

    test -n "${commits}" || commits=$(git log --since="$d 00:00" --pretty=format:'%h')

    # Get the author name and email from the latest commit of the day
    latestCommit=$(echo "$commits" | head -n 1)
    authorName=$(git log -1 --format='%an' "$latestCommit")
    authorEmail=$(git log -1 --format='%ae' "$latestCommit")

    # Count the number of commits and reverse the order
    commitCount=$(git rev-list --count HEAD --since="$fistCommitDate" --until="$d 23:59")

    # For every 20 commits the major version number is increased by 1
    setMajor=$(( commitCount / 20 ))

    # For every 10 commits the minor version number is increased by 1
    setMinor=$(( commitCount + setMajor ))

    setPatch=$(( $(date -d "$d" '+%-j') ))

    versionCode="${setMajor}.${setMinor}.${setPatch}"
    # Check if the branch is for development/testing or main branch.
    for branch in "${branches[@]}"; do case $branch in
        stable*|*main*|*master*|*release*|*production*  ) releaseType="stable"   ;;
        *dev*|*unstable*|*testing*                      ) releaseType="unstable" ;;
        *                                               ) releaseType="unstable" ;;
    esac; done

  # Format the date for the changelog entry
  changelogDate=$(date -d "$d" '+%a, %d %b %Y')

  # Start the changelog entry
    {

        echo "${packageName} (${versionCode}) ${releaseType}; urgency=optional"
        echo ""

        # Add each commit message to the changelog entry
        for commit in $commits; do
            commit_message=$(git log -1 --pretty=format:'%s' "$commit")
            echo "  * $commit_message"
        done

        # End the changelog entry
        echo ""
        echo " -- ${authorName} <${authorEmail}>  ${changelogDate} 00:00:00 +0000"
        echo ""

    } >> "$changelogFile"

    # Amend the version number to the version file int the root directory
done

currentVersion=$(grep -oP '(?<=\()\d+\.\d+\.\d+(?=\))' "$changelogFile" | head -n 1)

echo "Setting main version to ${currentVersion} in the version file"

echo "${currentVersion}" > version

exit 0

# Remove any duplicated entries
sed -i '/^$/d' "$changelogFile"
